% Delete this comment later
%   This code is generated by Ai and needs alot of fixing, namely the
%   parameters right below and the function definition (Visual servoing)
%   This code includes the code from the RealtimeCheckerBoardDetection file
%   and adds on to it to finish off the controller.
% 
% Load Calibration and Transformation Parameters
load('cameraParams.mat');      % Camera calibration parameters
load('T_ce.mat');              % Camera-to-end-effector transformation matrix
load('T_bw.mat');              % Base-to-world transformation matrix

% Define the proportional gain for control
K_p = 0.1;  % Adjust this value for smooth control (lower for slower, higher for faster response)

% Initialize RealSense Camera
cam = webcam;  % Replace with RealSense initialization if needed

% Define checkerboard parameters
squareSize = 35;  % Size of one square on the checkerboard in mm

while true
    % Capture an image and detect checkerboard position
    img = snapshot(cam);
    [imagePoints, boardSize] = detectCheckerboardPoints(img);
    
    if isempty(imagePoints)
        disp("Checkerboard not detected.");
        continue;  % Skip the rest of the loop if checkerboard isn't found
    end
    
    % Generate 3D world coordinates of the checkerboard points
    worldPoints = generateCheckerboardPoints(boardSize, squareSize);
    
    % Estimate the position of the checkerboard in the camera frame
    [rotationMatrix, translationVector] = estimateWorldCameraPose(imagePoints, worldPoints, cameraParams);
    
    % Convert the translation vector to a homogeneous 4x4 matrix (pose of checkerboard in camera frame)
    T_cw = [rotationMatrix, translationVector'; 0, 0, 0, 1];
    
    % Transform checkerboard position to world frame
    T_cb = T_bw * T_cw * T_ce;  % Checkerboard position in base frame
    
    % Extract checkerboard position in world frame
    checkerboardPosition_world = T_cb(1:3, 4);
    
    % Get the current end-effector position in the world frame
    currentEndEffectorPosition_world = getCurrentEndEffectorPosition();  % Define this function based on your setup
    
    % Calculate the position error
    positionError = checkerboardPosition_world - currentEndEffectorPosition_world;
    
    % Proportional control: generate movement command to reduce the error
    movementCommand = K_p * positionError;
    
    % Send the movement command to the Dobot
    sendMovementCommandToDobot(movementCommand);  % Define this function to interface with Dobot
    
    % Display information
    fprintf("Current End-Effector Position: (%.2f, %.2f, %.2f)\n", currentEndEffectorPosition_world);
    fprintf("Checkerboard Position: (%.2f, %.2f, %.2f)\n", checkerboardPosition_world);
    fprintf("Position Error: (%.2f, %.2f, %.2f)\n", positionError);
    fprintf("Movement Command: (%.2f, %.2f, %.2f)\n\n", movementCommand);
    
    % Optional: Add a break condition to exit the loop if needed
end

% Clear the camera when done
clear cam;
