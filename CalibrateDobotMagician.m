function CalibrateDobotMagician(calibrationAmount, cam)
    imageArray = zeros((length(calibrationAmount) - 1));

    % teach the robot to different positions, save [xyz] [rpy] 10-20x
    moveArray = [   [],[];...
                    [],[];...
                    [],[];...
                    [],[];...
                    [],[];...
                    [],[];...
                    [],[];...
                    [],[];...
                    [],[];...
                    [],[]...
                    ]; 
    
    
    % Joint states of the robot for calibration

    % Capture the images after moving the robot
    for i = 1:length(calibrationAmount)       
        position = moveArray(i, 1);  % Extract position
        rotation = moveArray(i, 2);  % Extract rotation
        sendTargetEndEffectorPose(position, rotation); % Pass position and rotation separately
        pause(4); % pause until the robot has finished moving, we have to hardcode this
    img = snapshot(cam);  % Capture the image
    imageFileName = sprintf('C:\\matlab\\Final Project\\Image%d.png', i);  % Create a unique filename
    imwrite(img, imageFileName);  % Save the image to the specified path
    
    imageArray{i} = img;  % Store the image in the array if needed later
    input('press enter to continue');
    end

    % use the images in imageArray and intrinsically and extrinsically 
    % calibrate using moveArray 
    % Insert the script that the calibration app generates and it should be
    % good

    % Based on this, we may need to figure out how to save the image we
    % take a snapshot of as a file and find the file name, plus write a
    % function to name it properly
    % Define images to process
    imageFileNames = {'C:\matlab\Final Project\Image1.png',...
        'C:\matlab\Final Project\Image2.png',...
        'C:\matlab\Final Project\Image3.png',...
        'C:\matlab\Final Project\Image4.png',...
        'C:\matlab\Final Project\Image5.png',...
        'C:\matlab\Final Project\Image6.png',...
        'C:\matlab\Final Project\Image7.png',...
        'C:\matlab\Final Project\Image8.png',...
        'C:\matlab\Final Project\Image9.png',...
        'C:\matlab\Final Project\Image10.png',...
        'C:\matlab\Final Project\Image11.png',...
        'C:\matlab\Final Project\Image12.png',...
        'C:\matlab\Final Project\Image13.png',...
        'C:\matlab\Final Project\Image14.png',...
        'C:\matlab\Final Project\Image15.png',...
        'C:\matlab\Final Project\Image16.png',...
        'C:\matlab\Final Project\Image17.png',...
        'C:\matlab\Final Project\Image18.png',...
        'C:\matlab\Final Project\Image19.png',...
        };
    % Detect calibration pattern in images
    detector = vision.calibration.monocular.CheckerboardDetector();
    [imagePoints, imagesUsed] = detectPatternPoints(detector, imageFileNames, 'HighDistortion', true);
    imageFileNames = imageFileNames(imagesUsed);
    
    % Read the first image to obtain image size
    originalImage = imread(imageFileNames{1});
    [mrows, ncols, ~] = size(originalImage);
    
    % Generate world coordinates for the planar pattern keypoints
    squareSize = 72;  % in units of 'millimeters'
    worldPoints = generateWorldPoints(detector, 'SquareSize', squareSize);
    
    % Calibrate the camera
    [cameraParams, imagesUsed, estimationErrors] = estimateCameraParameters(imagePoints, worldPoints, ...
        'EstimateSkew', false, 'EstimateTangentialDistortion', false, ...
        'NumRadialDistortionCoefficients', 2, 'WorldUnits', 'millimeters', ...
        'InitialIntrinsicMatrix', [], 'InitialRadialDistortion', [], ...
        'ImageSize', [mrows, ncols]);
    
    % View reprojection errors
    h1=figure; showReprojectionErrors(cameraParams);
    
    % Visualize pattern locations
    h2=figure; showExtrinsics(cameraParams, 'CameraCentric');
    
    % Display parameter estimation errors
    displayErrors(estimationErrors, cameraParams);
    
    % For example, you can use the calibration data to remove effects of lens distortion.
    undistortedImage = undistortImage(originalImage, cameraParams);
    
    % See additional examples of how to use the calibration data.  At the prompt type:
    % showdemo('MeasuringPlanarObjectsExample')
    % showdemo('StructureFromMotionExample')
end

